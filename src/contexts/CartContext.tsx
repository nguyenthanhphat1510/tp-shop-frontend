"use client";

import React, { createContext, useReducer, useContext, ReactNode, useEffect } from 'react';

// --- GI·∫¢I TH√çCH PH·∫¶N 1: ƒê·ªäNH NGHƒ®A C·∫§U TR√öC ---
// ƒê√¢y l√† c·∫•u tr√∫c c·ªßa m·ªôt m√≥n h√†ng khi n·∫±m trong gi·ªè.
// Ch√∫ng ta l∆∞u ƒë·ªß th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ hi·ªÉn th·ªã v√† g·ª≠i ƒëi.
export interface CartItem {
    productId: string;
    variantId: string;
    name: string;
    price: number;
    image: string;
    quantity: number;
}

// ƒê√¢y l√† c·∫•u tr√∫c c·ªßa to√†n b·ªô gi·ªè h√†ng: m·ªôt danh s√°ch c√°c m√≥n h√†ng.
interface CartState {
    items: CartItem[];
}

// ƒê√¢y l√† c√°c "m·ªánh l·ªánh" m√† ch√∫ng ta c√≥ th·ªÉ ra cho gi·ªè h√†ng.
type CartAction =
    | { type: 'ADD_ITEM'; payload: CartItem }
    | { type: 'REMOVE_ITEM'; payload: { variantId: string } }
    | { type: 'UPDATE_QUANTITY'; payload: { variantId: string; quantity: number } }
    | { type: 'CLEAR_CART' }
    | { type: 'LOAD_FROM_STORAGE' }; // ‚úÖ Action m·ªõi

// --- GI·∫¢I TH√çCH PH·∫¶N 2: LOCALSTORAGE HELPERS ---
const CART_STORAGE_KEY = 'tpshop_cart';

// ‚úÖ H√ÄM ƒê·ªåC CART T·ª™ LOCALSTORAGE
const loadCartFromStorage = (): CartItem[] => {
    // Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang ch·∫°y tr√™n browser kh√¥ng (tr√°nh l·ªói SSR)
    if (typeof window === 'undefined') {
        console.log('üö´ SSR - kh√¥ng th·ªÉ truy c·∫≠p localStorage');
        return [];
    }
    
    try {
        const storedCart = localStorage.getItem(CART_STORAGE_KEY);
        if (storedCart) {
            const parsedCart = JSON.parse(storedCart);
            console.log('üì¶ Loaded cart from localStorage:', parsedCart);
            return Array.isArray(parsedCart) ? parsedCart : [];
        }
    } catch (error) {
        console.error('‚ùå Error loading cart from localStorage:', error);
    }
    
    console.log('üì¶ No cart found in localStorage, starting fresh');
    return [];
};

// ‚úÖ H√ÄM L∆ØU CART V√ÄO LOCALSTORAGE
const saveCartToStorage = (items: CartItem[]) => {
    // Ki·ªÉm tra xem c√≥ ph·∫£i ƒëang ch·∫°y tr√™n browser kh√¥ng
    if (typeof window === 'undefined') {
        console.log('üö´ SSR - kh√¥ng th·ªÉ l∆∞u v√†o localStorage');
        return;
    }
    
    try {
        localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(items));
        console.log('üíæ Saved cart to localStorage:', {
            itemCount: items.length,
            totalQuantity: items.reduce((acc, item) => acc + item.quantity, 0)
        });
    } catch (error) {
        console.error('‚ùå Error saving cart to localStorage:', error);
    }
};

// --- GI·∫¢I TH√çCH PH·∫¶N 3: B·ªò N√ÉO X·ª¨ L√ù (REDUCER) C·∫¨P NH·∫¨T ---
// H√†m n√†y nh·∫≠n v√†o tr·∫°ng th√°i hi·ªán t·∫°i v√† m·ªôt m·ªánh l·ªánh, sau ƒë√≥ tr·∫£ v·ªÅ tr·∫°ng th√°i m·ªõi.
const cartReducer = (state: CartState, action: CartAction): CartState => {
    let newState: CartState;
    
    switch (action.type) {
        // Khi nh·∫≠n l·ªánh 'ADD_ITEM'
        case 'ADD_ITEM': {
            const existingItem = state.items.find(item => item.variantId === action.payload.variantId);
            
            if (existingItem) {
                // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng m√≥n h√†ng ƒë√£ c√≥
                newState = {
                    ...state,
                    items: state.items.map(item =>
                        item.variantId === action.payload.variantId
                            ? { ...item, quantity: item.quantity + action.payload.quantity }
                            : item
                    ),
                };
                console.log('üìà Updated existing item quantity:', {
                    variantId: action.payload.variantId,
                    oldQuantity: existingItem.quantity,
                    newQuantity: existingItem.quantity + action.payload.quantity
                });
            } else {
                // Th√™m m√≥n h√†ng m·ªõi
                newState = { 
                    ...state, 
                    items: [...state.items, action.payload] 
                };
                console.log('‚úÖ Added new item to cart:', action.payload.name);
            }
            break;
        }
        
        // Khi nh·∫≠n l·ªánh 'REMOVE_ITEM'
        case 'REMOVE_ITEM':
            newState = {
                ...state,
                items: state.items.filter(item => item.variantId !== action.payload.variantId),
            };
            console.log('üóëÔ∏è Removed item from cart:', action.payload.variantId);
            break;
            
        // Khi nh·∫≠n l·ªánh 'UPDATE_QUANTITY'
        case 'UPDATE_QUANTITY':
            newState = {
                ...state,
                items: state.items.map(item =>
                    item.variantId === action.payload.variantId
                        ? { ...item, quantity: action.payload.quantity }
                        : item
                ).filter(item => item.quantity > 0), // T·ª± ƒë·ªông x√≥a n·∫øu quantity = 0
            };
            console.log('üî¢ Updated item quantity:', {
                variantId: action.payload.variantId,
                quantity: action.payload.quantity
            });
            break;
            
        // Khi nh·∫≠n l·ªánh 'CLEAR_CART'
        case 'CLEAR_CART':
            newState = { items: [] };
            console.log('üßπ Cleared entire cart');
            break;
            
        // ‚úÖ TH√äM case m·ªõi ƒë·ªÉ load t·ª´ localStorage
        case 'LOAD_FROM_STORAGE':
            const loadedItems = loadCartFromStorage();
            newState = { items: loadedItems };
            console.log('üìÇ Loaded cart from storage:', {
                itemCount: loadedItems.length,
                totalQuantity: loadedItems.reduce((acc, item) => acc + item.quantity, 0)
            });
            // ‚ùå KH√îNG save l·∫°i v√†o localStorage ·ªü ƒë√¢y (tr√°nh loop)
            return newState;
            
        default:
            throw new Error(`Unhandled action type: ${(action as any).type}`);
    }
    
    // ‚úÖ T·ª∞ ƒê·ªòNG L∆ØU V√ÄO LOCALSTORAGE sau m·ªói thay ƒë·ªïi (tr·ª´ LOAD_FROM_STORAGE)
    saveCartToStorage(newState.items);
    
    return newState;
};


// --- GI·∫¢I TH√çCH PH·∫¶N 4: CARTPROVIDER C·∫¨P NH·∫¨T ---
// T·∫°o ra m·ªôt "ng·ªØ c·∫£nh" (Context) ƒë·ªÉ chia s·∫ª d·ªØ li·ªáu.
const CartContext = createContext<{
    state: CartState;
    dispatch: React.Dispatch<CartAction>;
} | undefined>(undefined);

// T·∫°o m·ªôt Component ƒë·∫∑c bi·ªát g·ªçi l√† Provider. Component n√†y s·∫Ω "√¥m" ·ª©ng d·ª•ng c·ªßa b·∫°n,
// v√† cung c·∫•p d·ªØ li·ªáu gi·ªè h√†ng cho t·∫•t c·∫£ c√°c component con b√™n trong n√≥.
export const CartProvider = ({ children }: { children: ReactNode }) => {
    // Kh·ªüi t·∫°o state v·ªõi gi·ªè h√†ng tr·ªëng
    const [state, dispatch] = useReducer(cartReducer, { items: [] });
    
    // ‚úÖ KHI COMPONENT MOUNT, T·ª∞ ƒê·ªòNG LOAD T·ª™ LOCALSTORAGE
    useEffect(() => {
        console.log('üöÄ CartProvider mounted - loading cart from localStorage');
        dispatch({ type: 'LOAD_FROM_STORAGE' });
    }, []); // Ch·ªâ ch·∫°y 1 l·∫ßn khi component mount
    
    // ‚úÖ DEBUG: Log m·ªói khi state thay ƒë·ªïi
    useEffect(() => {
        const itemCount = state.items.length;
        const totalQuantity = state.items.reduce((acc, item) => acc + item.quantity, 0);
        const totalValue = state.items.reduce((acc, item) => acc + (item.price * item.quantity), 0);
        
        console.log('üõí Cart state updated:', {
            itemCount,
            totalQuantity,
            totalValue: totalValue.toLocaleString('vi-VN') + 'ƒë',
            items: state.items.map(item => ({
                name: item.name,
                quantity: item.quantity,
                price: item.price.toLocaleString('vi-VN') + 'ƒë'
            }))
        });
    }, [state.items]);
    
    return (
        <CartContext.Provider value={{ state, dispatch }}>
            {children}
        </CartContext.Provider>
    );
};

// --- GI·∫¢I TH√çCH PH·∫¶N 5: CUSTOM HOOK ---
// T·∫°o m·ªôt "l·ªëi t·∫Øt" (Custom Hook) ƒë·ªÉ c√°c component kh√°c c√≥ th·ªÉ truy c·∫≠p gi·ªè h√†ng
// m·ªôt c√°ch d·ªÖ d√†ng v√† s·∫°ch s·∫Ω, ch·ªâ b·∫±ng c√°ch g·ªçi `useCart()`.
export const useCart = () => {
    const context = useContext(CartContext);
    if (context === undefined) {
        throw new Error('useCart must be used within a CartProvider');
    }
    return context;
};

// ‚úÖ TH√äM: Export helper functions ƒë·ªÉ s·ª≠ d·ª•ng b√™n ngo√†i (optional)
export const cartUtils = {
    // T√≠nh t·ªïng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    getTotalQuantity: (items: CartItem[]): number => {
        return items.reduce((acc, item) => acc + item.quantity, 0);
    },
    
    // T√≠nh t·ªïng gi√° tr·ªã gi·ªè h√†ng
    getTotalValue: (items: CartItem[]): number => {
        return items.reduce((acc, item) => acc + (item.price * item.quantity), 0);
    },
    
    // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
    hasItem: (items: CartItem[], variantId: string): boolean => {
        return items.some(item => item.variantId === variantId);
    },
    
    // L·∫•y th√¥ng tin item c·ª• th·ªÉ
    getItem: (items: CartItem[], variantId: string): CartItem | undefined => {
        return items.find(item => item.variantId === variantId);
    }
};